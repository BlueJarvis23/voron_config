[gcode_macro _CLIENT_VARIABLE]
variable_printer_status   : "Ready"
variable_status_effect_macros    : ["_STATUS_CONSOLE", "_STATUS_KLIPPER_SCREEN", "_STATUS_LED"]
gcode:

[gcode_macro SET_STATUS]
gcode:
    SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=printer_status    VALUE="'{params.STATUS|upper|default("READY")}'"
    UPDATE_DELAYED_GCODE ID=_EFFECT_STATUS DURATION=1
    
[gcode_macro REFRESH_STATUS]
gcode:
    UPDATE_DELAYED_GCODE ID=_EFFECT_STATUS DURATION=1

[delayed_gcode _EFFECT_STATUS]
gcode:
    # put in a count of array size some how, increment through and recursively call UPDATE_DELAYED_GCODE until counter is through all is better than for eaching through all right here and dumping them all on stack?
    {% set status = printer['gcode_macro _CLIENT_VARIABLE'].printer_status %}
	{% for macro in printer['gcode_macro _CLIENT_VARIABLE'].status_effect_macros %}
        { action_respond_info("Effecting STATUS Macro: " ~ macro ~ " with: " ~ status) }
        UPDATE_DELAYED_GCODE ID={macro} DURATION=1
    {% endfor %}

[delayed_gcode _STATUS_CONSOLE]
gcode:
    {% set status = printer['gcode_macro _CLIENT_VARIABLE'].printer_status %}
    # don't need all these case checks, as we just print out status in all cases, but if you wanted to do custom LED lighting in your own or did want to do something special, this is template
    # { action_respond_info("Printer status in _STATUS_CONSOLE is: " ~ status) }

[delayed_gcode _STATUS_KLIPPER_SCREEN]
gcode:
	{% set status = printer['gcode_macro _CLIENT_VARIABLE'].printer_status %}
    SET_DISPLAY_TEXT MSG={status}