## Chamber Lighting - HE2 Connector (Optional)
[output_pin blacklight]
pin: PB10
pwm: true
shutdown_value: 0
value: 0
cycle_time: 0.01666

[neopixel caselight]
pin: PB6
chain_count: 68
color_order: GRBW
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.0
initial_WHITE: 0.0

# caselight right is:
#		 neopixel:caselight (1-20)
# caselight center is:
#		 neopixel:caselight (21-47)
# caselight left is:
#		 neopixel:caselight (48-68)

[led_effect overhead_white_on]
autostart:				false
frame_rate:				24
leds:
	neopixel:caselight
layers:
	static		1.0	0.0			add	(0.0, 0.0, 0.0, 1.0)

[led_effect caselight_leveling]
autostart:				false
frame_rate:				24
leds:
	neopixel:caselight
layers:
	gradient	3.0	3.0			add	(0.0, 0.0, 1.0), (0.0, 0.0, 1.0), (1.0, 0.0, 0.0), (1.0, 0.0, 0.0)

[led_effect caselight_homing]
autostart:				false
frame_rate:				24
leds:
	neopixel:caselight
layers:
	gradient	1.0	2.0		add	(1.0, 1.0, 0.0), (0.0, 0.0, 0.0), (0.0, 1.0, 1.0), (0.0, 0.0, 0.0)

[led_effect caselight_soaking]
autostart:				false
frame_rate:				24
leds:
	neopixel:caselight
layers:
	gradient	0.3	6.00		add	(0.0, 0.0, 0.0), (1.0, 0.5, 0.0)
	twinkle		5.0	0.05		add	(1.0, 1.0, 1.0)
#	pattern		0.4	1.0		add	(0.0, 0.5, 1.0), (0.3, 0.5, 0.5), (0.0, 1.0, 0.0) 

[led_effect caselight_cleaning]
autostart:				false
frame_rate:				24
leds:
	neopixel:caselight
layers:
	comet		2.0		5.0		add	(1.0, 0.0, 0.5, 0.0), (1.0, 0.0, 0.5, 0.0)
	comet		-2.0	5.0		add	(1.0, 0.5, 0.0, 0.0), (1.0, 0.5, 0.0, 0.0)

[led_effect logo_idle]
autostart:				false
frame_rate:				24
leds:
	neopixel:sb_leds (1)
	neopixel:sb_leds (2,3)
layers:
	breathing	10.0	1.0		top	(0.0, 0.0, 0.7, 0.0)

[led_effect caselight_meshing]
autostart:				false
frame_rate:				24
leds:
	neopixel:caselight
layers:
	breathing	3.0	1.0		top	(0.2, 1.0, 0.0)

[led_effect critical_error]
leds:
	neopixel:sb_leds (1)
	neopixel:sb_leds (2,3)
	neopixel:caselight
autostart:							false
frame_rate:							24
run_on_error:						true
layers:
	strobe		1.0	1.5		add			(1.0, 1.0, 1.0, 1.0)
	breathing	2.0	0.0		difference	(0.95, 0.0, 0.0, 0.0)
	static		1.0	0.0		top			(1.0, 0.0, 0.0, 0.0)

[led_effect caselight_heating_bed]
leds:
	neopixel:caselight
autostart:							false
frame_rate:							24
heater:								heater_bed
layers:
	temperature	50	110		add	(0.0, 0.0, 1.0),	(1.0, 1.0, 0.0),	(1.0, 0.0, 0.0)

[led_effect sb_heating_bed]
leds:
	neopixel:sb_leds (1)
	neopixel:sb_leds (2,3)
autostart:							false
frame_rate:							24
heater:								heater_bed
layers:
	heater		30.0	1.0			add	(0.0, 1.0, 0.0),	(1.0, 0.0, 0.0)
	breathing		2.0	0.0			difference	(0.5, 0.5, 0.5)

[led_effect caselight_heating_hotend]
leds:
	neopixel:caselight
autostart:							false
frame_rate:							24
heater:								extruder
layers:
	temperature	150		250			add	(0.0, 0.0, 1.0),	(1.0, 1.0, 0.0),	(1.0, 0.0, 0.0)

[led_effect caselight_warming_hotend]
leds:
	neopixel:caselight
autostart:							false
frame_rate:							24
heater:								extruder
layers:
	temperature	40		150			add	(0.0, 0.0, 1.0), (1.0, 1.0, 0.0), (1.0, 0.0, 0.0)

[led_effect sb_heating_hotend]
leds:
	neopixel:sb_leds (1)
	neopixel:sb_leds (2,3)
autostart:							false
frame_rate:							24
heater:								extruder
layers:
	temperature	150		250		add	(0.0, 0.0, 1.0), (1.0, 1.0, 0.0), (1.0, 0.0, 0.0)
	breathing	2.0		0.0		difference	(0.5, 0.5, 0.5)

[led_effect sb_warming_hotend]
leds:
	neopixel:sb_leds (1)
	neopixel:sb_leds (2,3)
autostart:							false
frame_rate:							24
heater:								extruder
layers:
	temperature		40		150		add	(0.0, 0.0, 1.0), (1.0, 1.0, 0.0), (1.0, 0.0, 0.0)
	breathing		2.0		0.0		difference	(0.5, 0.5, 0.5)

[led_effect caselight_calibrating_z]
autostart:				false
frame_rate:				24
leds:
	neopixel:caselight
layers:
	breathing		3.0		1.0			add	(0.0, 0.0, 0.4), (0.0, 0.4, 0.0)

[led_effect progress_bar]
leds:
	neopixel:sb_leds (1)
	neopixel:sb_leds (2,3)
autostart:							false
frame_rate:							24
layers:
	progress	-1.0	0.0			add	(0.0, 0.0, 1.0), (0.0, 0.1, 0.6)
	static		0.0		0.0			top	(0.0, 0.0, 0.1)

[led_effect loading]
leds:
	neopixel:sb_leds (1)
	neopixel:sb_leds (2,3)
autostart:							false
frame_rate:							24
layers:
	comet		0.3		0.0			add	(0.0, 0.0, 1.0)

[led_effect rainbow_sb]
leds:
	neopixel:sb_leds (1)
	neopixel:sb_leds (2,3)
autostart:							false
frame_rate:							24
layers:
	gradient	0.3		1.0			add	(0.3, 0.0, 0.0), (0.0, 0.3, 0.0), (0.0, 0.0, 0.3)

[led_effect rainbow_caselight]
leds:
	neopixel:caselight
autostart:							false
frame_rate:							24
layers:
	gradient	1.0		1.0			add	(1.0, 0.0, 0.0), (0.0, 1.0, 0.0), (0.0, 0.0, 1.0)

[led_effect epilepsie]
leds:
	neopixel:sb_leds (1)
	neopixel:sb_leds (2,3)
	neopixel:caselight
autostart:							false
frame_rate:							24
layers:
	blink		0.2		1.0			add	(1.0, 0.0, 0.0), (0.0, 1.0, 0.0), (0.0, 0.0, 1.0)


#######################
# The Lighting Macros #
#######################

[gcode_macro TOGGLE_BLACKLIGHT]
gcode:
	{% set blacklight_state = printer["gcode_macro _Greg_Vars"].blacklight_state %}
	{% if blacklight_state > 0 %}
		SET_GCODE_VARIABLE MACRO=_Greg_Vars VARIABLE=blacklight_state VALUE={ 0 }
		SET_PIN PIN=blacklight VALUE=0
	{% else %}
		SET_GCODE_VARIABLE MACRO=_Greg_Vars VARIABLE=blacklight_state VALUE={ 1 }
		SET_PIN PIN=blacklight VALUE=1
	{% endif %}

[gcode_macro TOGGLE_CASELIGHT_WHITE]
gcode:
	{% set caselight_white_state = printer["gcode_macro _Greg_Vars"].caselight_white_state %}
	{% if caselight_white_state > 0 %}
		SET_GCODE_VARIABLE MACRO=_Greg_Vars VARIABLE=caselight_white_state VALUE={ 0 }
		SET_LED_EFFECT EFFECT=overhead_white_on STOP=1 FADETIME=1
		UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
	{% else %}
		SET_GCODE_VARIABLE MACRO=_Greg_Vars VARIABLE=caselight_white_state VALUE={ 1 }
		SET_LED_EFFECT EFFECT=overhead_white_on FADETIME=1
		UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
	{% endif %}

[gcode_macro TOGGLE_CASELIGHT_POLICE]
gcode:
	{% set caselight_police_state = printer["gcode_macro _Greg_Vars"].caselight_police_state %}
	{% if caselight_police_state > 0 %}
		SET_GCODE_VARIABLE MACRO=_Greg_Vars VARIABLE=caselight_police_state VALUE={ 0 }
		SET_LED_EFFECT EFFECT=caselight_leveling STOP=1 FADETIME=1
		M117 You're free to go...
		M118 You're free to go...
		UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
	{% else %}
		SET_GCODE_VARIABLE MACRO=_Greg_Vars VARIABLE=caselight_police_state VALUE={ 1 }
		SET_LED_EFFECT EFFECT=caselight_leveling FADETIME=1
		M117 You're under arrest!
		M118 You're under arrest!
		UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
	{% endif %}

[gcode_macro set_logo_leds_off]
gcode:
	STOP_LED_EFFECTS LEDS="neopixel:sb_leds (1)"

[gcode_macro set_logo_leds_on]
gcode:
	STOP_LED_EFFECTS LEDS="neopixel:sb_leds (1)"
	SET_LED_EFFECT EFFECT=set_logo_leds

[gcode_macro set_nozzle_leds_on]
gcode:
	STOP_LED_EFFECTS LEDS="neopixel:sb_leds (2,3)"
	SET_LED_EFFECT EFFECT=set_nozzle_leds

[gcode_macro set_nozzle_leds_off]
gcode:
	STOP_LED_EFFECTS LEDS="neopixel:sb_leds (2,3)"

[gcode_macro status_off]
gcode:
	SET_GCODE_VARIABLE MACRO=_Greg_Vars VARIABLE=caselight_white_state VALUE={ 0 }
	STOP_LED_EFFECTS FADETIME=1

[gcode_macro status_ready]
gcode:
	{% set caselight_white_state = printer["gcode_macro _Greg_Vars"].caselight_white_state %}
	{% if caselight_white_state > 0 %}
		SET_GCODE_VARIABLE MACRO=_Greg_Vars VARIABLE=caselight_white_state VALUE={ 0 }
		SET_LED_EFFECT EFFECT=overhead_white_on STOP=1
	{% endif %}
	
	SET_LED_EFFECT EFFECT=rainbow_sb
	SET_LED_EFFECT EFFECT=rainbow_caselight
	SET_LED_EFFECT EFFECT=rainbow_caselight STOP=1 FADETIME=10
	SET_LED_EFFECT EFFECT=rainbow_sb STOP=1 FADETIME=10

	# Set the state of the caseline_white_state so it's not out of sync.
	SET_GCODE_VARIABLE MACRO=_Greg_Vars VARIABLE=caselight_white_state VALUE={ 1 }
	SET_LED_EFFECT EFFECT=overhead_white_on FADETIME=10
	
	SET_LED_EFFECT EFFECT=set_nozzle_leds FADETIME=10

[gcode_macro status_part_ready]
gcode:
	STATUS_OFF
	SET_LED_EFFECT EFFECT=sb_nozzle_part_ready FADETIME=2
	SET_LED_EFFECT EFFECT=sb_logo_part_ready FADETIME=2
	SET_LED_EFFECT EFFECT=rainbow_caselight FADETIME=2

[gcode_macro status_part_ready_end]
gcode:
	SET_LED_EFFECT EFFECT=sb_nozzle_part_ready STOP=1 FADETIME=30
	SET_LED_EFFECT EFFECT=sb_logo_part_ready STOP=1 FADETIME=30
	SET_LED_EFFECT EFFECT=rainbow_caselight STOP=1 FADETIME=30

[gcode_macro status_busy]
gcode:
	SET_LED_EFFECT EFFECT=sb_logo_busy FADETIME=2
	set_nozzle_leds_on

[gcode_macro status_busy_end]
gcode:
	SET_LED_EFFECT EFFECT=sb_logo_busy STOP=1 FADETIME=2

[gcode_macro status_heating_hotend]
gcode:
	SET_LED_EFFECT EFFECT=sb_heating_hotend FADETIME=2
	SET_LED_EFFECT EFFECT=caselight_heating_hotend FADETIME=2

[gcode_macro status_heating_hotend_end]
gcode:
	SET_LED_EFFECT EFFECT=sb_heating_hotend STOP=1 FADETIME=2
	SET_LED_EFFECT EFFECT=caselight_heating_hotend STOP=1 FADETIME=5

[gcode_macro status_warming_hotend]
gcode:
	SET_LED_EFFECT EFFECT=sb_warming_hotend FADETIME=2
	SET_LED_EFFECT EFFECT=caselight_warming_hotend FADETIME=2

[gcode_macro status_warming_hotend_end]
gcode:
	SET_LED_EFFECT EFFECT=sb_warming_hotend STOP=1 FADETIME=2
	SET_LED_EFFECT EFFECT=caselight_warming_hotend STOP=1 FADETIME=5

[gcode_macro status_heat_soaking]
gcode:
	SET_LED_EFFECT EFFECT=caselight_soaking FADETIME=2

[gcode_macro status_heat_soaking_end]
gcode:
	SET_LED_EFFECT EFFECT=caselight_soaking STOP=1 FADETIME=2

[gcode_macro status_heating_bed]
gcode:
	SET_LED_EFFECT EFFECT=sb_heating_bed FADETIME=2
	SET_LED_EFFECT EFFECT=caselight_heating_bed FADETIME=2

[gcode_macro status_heating_bed_end]
gcode:
	SET_LED_EFFECT EFFECT=sb_heating_bed STOP=1 FADETIME=2
	SET_LED_EFFECT EFFECT=caselight_heating_bed STOP=1 FADETIME=2

[gcode_macro status_cooling]
gcode:
	SET_LED_EFFECT EFFECT=sb_logo_cooling FADETIME=2
	SET_LED_EFFECT EFFECT=sb_nozzle_cooling FADETIME=2

[gcode_macro status_cooling_end]
gcode:
	SET_LED_EFFECT EFFECT=sb_logo_cooling STOP=1 FADETIME=2
	SET_LED_EFFECT EFFECT=sb_nozzle_cooling STOP=1 FADETIME=2

[gcode_macro status_leveling]
gcode:
	SET_LED_EFFECT EFFECT=sb_logo_leveling FADETIME=2
	SET_LED_EFFECT EFFECT=caselight_leveling FADETIME=2

[gcode_macro status_leveling_end]
gcode:
	SET_LED_EFFECT EFFECT=sb_logo_leveling STOP=1 FADETIME=2
	SET_LED_EFFECT EFFECT=caselight_leveling STOP=1 FADETIME=2

[gcode_macro status_homing]
gcode:
	SET_LED_EFFECT EFFECT=sb_logo_homing FADETIME=2
	SET_LED_EFFECT EFFECT=caselight_homing FADETIME=2

[gcode_macro status_homing_end]
gcode:
	SET_LED_EFFECT EFFECT=sb_logo_homing STOP=1 FADETIME=2
	SET_LED_EFFECT EFFECT=caselight_homing STOP=1 FADETIME=2

[gcode_macro status_cleaning]
gcode:
	SET_LED_EFFECT EFFECT=sb_logo_cleaning FADETIME=2
	SET_LED_EFFECT EFFECT=caselight_cleaning FADETIME=2

[gcode_macro status_cleaning_end]
gcode:
	SET_LED_EFFECT EFFECT=sb_logo_cleaning STOP=1 FADETIME=2
	SET_LED_EFFECT EFFECT=caselight_cleaning STOP=1 FADETIME=2

[gcode_macro status_meshing]
gcode:
	SET_LED_EFFECT EFFECT=sb_logo_meshing FADETIME=2
	SET_LED_EFFECT EFFECT=caselight_meshing FADETIME=2

[gcode_macro status_meshing_end]
gcode:
	SET_LED_EFFECT EFFECT=sb_logo_meshing STOP=1 FADETIME=2
	SET_LED_EFFECT EFFECT=caselight_meshing STOP=1 FADETIME=2

[gcode_macro status_calibrating_z]
gcode:
	SET_LED_EFFECT EFFECT=sb_logo_calibrating_z FADETIME=2
	SET_LED_EFFECT EFFECT=caselight_calibrating_z FADETIME=2

[gcode_macro status_calibrating_z_end]
gcode:
	SET_LED_EFFECT EFFECT=sb_logo_calibrating_z STOP=1 FADETIME=2
	SET_LED_EFFECT EFFECT=caselight_calibrating_z STOP=1 FADETIME=2

[gcode_macro status_printing]
gcode:
	SET_LED_EFFECT EFFECT=sb_logo_printing
	set_nozzle_leds_on

[gcode_macro critical_error]
gcode:
	SET_LED_EFFECT EFFECT=overhead_white_on STOP=1
	SET_LED_EFFECT EFFECT=critical_error FADETIME=2

[gcode_macro critical_error_end]
gcode:
	SET_LED_EFFECT EFFECT=overhead_white_on FADETIME=2
	SET_LED_EFFECT EFFECT=critical_error STOP=1 FADETIME=2

################################
# MACROS USING RENAME_EXISTING #
################################

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: QUAD_GANTRY_LEVEL_LED
gcode:
	STATUS_LEVELING
	M117 Perform Quad Gantry Level.
	M118 Perform Quad Gantry Level.
	UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=5
	QUAD_GANTRY_LEVEL_LED {rawparams}
	STATUS_LEVELING_END

[gcode_macro G28]
rename_existing: G28.1
gcode:
	STATUS_HOMING
	G28.1 {rawparams}
	STATUS_HOMING_END
	
[gcode_macro M109]
rename_existing: M109.1
gcode:
	{% if rawparams %}
		{% set s_tmp = rawparams.split('S', 1)[1] %}
		{% if s_tmp == "150" %}
			{ action_respond_info('warming: ' ~ s_tmp) }
			STATUS_WARMING_HOTEND
			M109.1 {rawparams}
			STATUS_WARMING_HOTEND_END
		{% else %}
			{ action_respond_info('heating: ' ~ s_tmp) }
			STATUS_HEATING_HOTEND
			M109.1 {rawparams}
			STATUS_HEATING_HOTEND_END
		{% endif %}
	{% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_LED
gcode:
	STATUS_MESHING
	BED_MESH_CALIBRATE_LED {rawparams}
	STATUS_MESHING_END

[gcode_macro CARTOGRAPHER_TOUCH]
rename_existing: CARTOGRAPHER_TOUCH_LED
gcode:
	STATUS_CALIBRATING_Z
	CARTOGRAPHER_TOUCH_LED {rawparams}
	STATUS_CALIBRATING_Z_END

###############################
# CLEAN_NOZZLE OVERRIDE START #
###############################

## This is the override for CLEAN_NOZZLE since we cannot use rename_existing on macros.
[gcode_macro CLEAN_NOZZLE]
variable_location_bucket_rear:	True
variable_enable_purge:			True
variable_purge_len:				10	; Amount of filament, in mm, to purge.
variable_purge_spd:				100	; Speed, in mm/min, of the purge.
variable_purge_temp_min:		200	; Minimum nozzle temperature to permit a purge. Otherwise, purge will not occur.
variable_purge_ret:				2	; Retract length, in mm, after purging to prevent slight oozing. Adjust as necessary.
variable_ooze_dwell:			2	; Dwell/wait time, in seconds, after purging and retracting.
variable_brush_top:				2 
variable_clearance_z:			5	; When traveling, but not cleaning, the clearance along the z-axis between nozzle and brush.
variable_wipe_qty:				3	; Number of complete (A complete wipe: left, right, left OR right, left, right) wipes.
variable_prep_spd_xy:			3000	; Travel (not cleaning) speed along x and y-axis in mm/min.
variable_prep_spd_z:			1500	; Travel (not cleaning) speed along z axis in mm/min.
variable_wipe_spd_xy:			5000	; Nozzle wipe speed in mm/min.
variable_brush_start:			50
variable_brush_width:			52
variable_brush_front:			0
variable_brush_depth:			0
variable_bucket_left_width:		67
variable_bucket_right_width:	40
variable_bucket_gap:			22
variable_bucket_start:			0
variable_bucket_pos:			1
gcode:
	{% if "xyz" in printer.toolhead.homed_axes %}
		STATUS_CLEANING
		SAVE_GCODE_STATE NAME=CLEAN_NOZZLE
		G90
		{% set Ry = printer.configfile.config["stepper_y"]["position_max"]|float %}
		{% if enable_purge %}
			SET_GCODE_VARIABLE MACRO=CLEAN_NOZZLE VARIABLE=bucket_pos VALUE={(range(2) | random)}
			G1 Z{brush_top + clearance_z} F{prep_spd_z}
			{% if location_bucket_rear %}
				G1 Y{Ry} F{prep_spd_xy}
			{% else %}
				G1 Y{brush_front + (brush_depth / 2)} F{prep_spd_xy}
			{% endif %}
			G1 X{bucket_start + (bucket_left_width / (2 - bucket_pos)) + (bucket_pos * bucket_gap) + (bucket_pos * (bucket_right_width / 2))}
			{% if printer.extruder.temperature >= purge_temp_min %}
				M83      ; relative mode
				G1 E{purge_len} F{purge_spd}
				G1 E-{purge_ret} F{purge_spd * 5}
				G4 P{ooze_dwell * 1000}
				G92 E0   ; reset extruder
			{% endif %}
		{% endif %}
		G1 Z{brush_top + clearance_z} F{prep_spd_z}
		G1 X{brush_start + (brush_width * bucket_pos)} F{prep_spd_xy}
		{% if location_bucket_rear %}
			G1 Y{Ry}
		{% else %}
			G1 Y{brush_front + (brush_depth / 2)}
		{% endif %}
		G1 Z{brush_top} F{prep_spd_z}
		{% for wipes in range(1, (wipe_qty + 1)) %}
			G1 X{brush_start + (brush_width * (1 - bucket_pos))} F{wipe_spd_xy}
			G1 X{brush_start + (brush_width * bucket_pos)} F{wipe_spd_xy}
		{% endfor %}
		M117 Cleaned!
		G1 Z{brush_top + clearance_z} F{prep_spd_z}
		G1 X{bucket_left_width / 4} F{prep_spd_xy} 
		UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=60
		RESTORE_GCODE_STATE NAME=CLEAN_NOZZLE
		STATUS_CLEANING_END
	{% else %}
		{ action_raise_error("Please home your axes!") }
		M117 Please home first!
	{% endif %}

############################
# HEAT_SOAK OVERRIDE START #
############################
## This is the override for HEAT_SOAK since we cannot use rename_existing on macros.
[gcode_macro HEAT_SOAK]
description: Heats the bed and performs a soak. BED=110 DURATION=6 (minutes)

variable_target_bed_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set BED = params.BED | default(110) | float %}
    {% set DURATION = (params.DURATION | default(6) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_bed_temp     VALUE={ BED }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
	STATUS_HEATING_BED
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ BED }
	HOME_IF_NEEDED
	CENTER

    UPDATE_DELAYED_GCODE ID=HEAT_SOAKER DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: Cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=HEAT_SOAKER DURATION=1

[delayed_gcode HEAT_SOAKER]
## debug
# { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_bed_temp %}
        {% set stage = "soaking" %}
		STATUS_HEATING_BED_END
		STATUS_HEAT_SOAKING
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
            M118 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
			STATUS_HEAT_SOAKING_END
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
            M118 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
			STATUS_HEAT_SOAKING_END
			SOAK_COMPLETE
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_bed_temp     VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
                M118 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
                M118 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=HEAT_SOAKER DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}

[gcode_macro SOAK_COMPLETE]
description: Finish the soak command
gcode:
	M109 S150
	G32

##########################
# HEAT_SOAK OVERRIDE END #
##########################

[delayed_gcode _STATUS_LED]
gcode:
    {% set status = printer['gcode_macro _CLIENT_VARIABLE'].printer_status %}
    # don't need all these case checks, as we just print out status in all cases, but if you wanted to do custom LED lighting in your own or did want to do something special, this is template

    {% if status == "READY" %}
    {% elif status == "EXTRUDER_HEATING" %}
    {% elif status == "HOMING" %}
		STATUS_HOMING
    {% elif status == "HOMING_END" %}
		STATUS_HOMING_END
    {% elif status == "BED_HEATING" %}
    {% elif status == "BED_MESH" %}
    {% elif status == "PRINTING" %}
    {% elif status == "LEVELING" %}
		STATUS_LEVELING
    {% elif status == "LEVELING_END" %}
		STATUS_LEVELING_END
    {% elif status == "HEAT_SOAKING" %}
    {% elif status == "CRITICAL_ERROR" %}
    {% elif status == "NOZZLE_CLEANING" %}
    {% elif status == "COOLING" %}
    {% elif status == "IDLE" %}
    {% elif status == "BUSY" %}
    {% endif %}
